Per-request, the layout of the resources of Lanarts:

doc/
	todolist (& very unused devlog)


For some heavily nested folders only folders/files of interest mentioned

res:
	Resources for lanarts, including lua scripts, YAML files, and sprites

	controls.yaml:
		Not used yet, idea for how controls can be defined until a UI for such is made
	datafiles.yaml:
		Informs the engine of the location of all the .yaml files
	main.lua:
		Includes all the lua files so they are loaded by the engine
	settings.yaml:
		Defines user configuration options like debug and network options
	data:
		YAML files and lua scripts that define function callbacks. 
		Lua still needs lots of expansion so that lanarts acts more like a generic engine.
		
		levels.yaml:
			Implements all the level generation descriptions		
		objects:
			yaml/lua markup for objects implemented in lua, unused
		projectiles:
			yaml projectiles, including ones for use in spells, use by enemies, and use as/with weapons
		spells:
			yaml/lua markup for spells, needs expansion in code for good use
		weapons:
			yaml/lua markup for weapons, includes items and enemy weapons which may be more abstract		
			
	fonts:
		font files
	sprites:
		All the image files for lanarts except tiles
	tiles:
		All the tile files for lanarts
		

Source:
	data:
		Definitions for structures such as item info, tile info etc.
	data/init:
		Loads all the data into global vectors of the structures in data
	collision_avoidance:
		Defines an interface for the RVO library so as to abstract the needed operations
	combat_logic:
		Needs more usage, will hold all combat decisions, currently decides whether monsters should use ranged or melee attack
	display:
		Holds all the font & sprite loading code, as well as functions for drawing of shapes/images/text conveniently
	fov:
		Defines an interface for using the field-of-view library
	fov/impl:
		Implements field of view library used for vision line of sight
	gamestats:
		Holds stat information.
		CombatGameStats is the structure for base stats for a player/enemy
		EffectStats handles the various effects that can be attached to a player/enemy such as haste
		EnemiesSeen holds the enemies that have been seen for use by the sidebar
		Equipment holds the items owned or equipped by a player (or theoretically an enemy)
		Inventory holds all the items owned but not equipped by a player
		items.h defines the item structures, Item, Weapon, Projectile. 
			The properties structure is meant to hold any randomly generated item properties.
		skills.h defines currently unused skill structures for skill levels
		SpellsKnown holds spells known by the player (again theoretically enemies too)
		stat_formulas holds things like experience point needed calculation and the basic damage formula
			As well, how much stats affect combat is handled here
		stats.cpp defines derived and core stats. Derived stats are used as a part of the battle formula.
			EffectiveAttackStats is derived from CombatGameStats and takes into account effects, equipment, etc.
			This is used for most cases where stats are queried. It is calculated once per step.
	lua:
		Defines lua bindings
	net:
		Defines an interface for using src_net library. This keeps some lanarts details away from src_net.
	pathfind:
		Pathfinding algorithms, A* and floodfill based
	procedural:
		Routines for generating rooms
	util:
		Utility structures and functions. LuaValue is a convenient way of storing a lua object in C++.
	world:
		Contains the active game state definitions.
		
		GameState.h:
			Defines the all-encompassing GameState object. 
			This can be thought of more or less as a global state object for the game.
			This is decomposed into several other objects, while all combined into one interface in this object for convenience.
			The calls vary from querying IO state, collision lookups, adding instances, etc.
			
		GameInstSet.h:
			Low level structure to efficiently implement ID lookup and collision checking.
			Divides the game world into 96x96 object buckets.
			Holds a hash map of the game instances.
			Defines the ordering that instances are traversed to, and drawn.
				This is determined by their depth attribute first, and then their ID.
				
		GameLevelState.h:
			Holds all the information for a given level. 
			This includes GameTiles, GameInstSet, MonsterController, PlayerController, and some metadata.
		
		controllers:
			Defines global behaviour objects eg, MonsterController & PlayerController.
			This includes objects that handle tasks common to all players, all enemies, and IO
			
		level:
			To-be-used. Will define level layouts.
		objects:
			Defines for game instances in lanarts. 
			All objects derive from GameInst and have draw/step phases.
			The step phase is meant for updates based on game state.
			The draw phase is meant solely for drawing with no state change (allows frame skips).
			The player instance and enemy instances additionally derive from CombatGameInst.
			Any duplicated functionality should go in CombatGameInst.
			
			GameInst's are reference counted as of recently to allow them to be alive across rooms.
			GameInstRef is a reference counted pointer to a GameInst. Use sparingly.
			
			All GameInst objects are assigned a level-specific object ID. 
			This can be queried in a level and returns NULL if the object has died.
			
		ui:
			Defines user interface components, such as the action bar, the HUD, and side bar contents
		utility_objects:
			Defines user interface objects and other objects that dont directly affect game play
		