/*
 * functions.h:
 *  Provides ability to push a CPP function.
 */

#ifndef LUAWRAP_FUNCTIONS_H_
#define LUAWRAP_FUNCTIONS_H_

extern "C" {
#include <lua/lua.h>
}

#include "luawrap.h"

#include "func_helper.h"

namespace luawrap {
namespace _private {

bool argcheck(lua_State* L, const char* funcname, int argn, bool arg_ok);

template<typename T>
struct FuncWrap {
	// Nothing, if it gets to the fallback it is not supported
};

/******************************************************************************
 * START AUTOGENERATED CODE -- Here be DRAGONS. Use generate-code.py to edit  *
 ******************************************************************************/

template<>
struct FuncWrap<void (*)()> {
	static int cppfunction(lua_State* L) {

		((void (*)())lua_touserdata(L, lua_upvalueindex(1)))();
		return 0;
	}
};
template<typename R>
struct FuncWrap<R (*)()> {
	static int cppfunction(lua_State* L) {

		PushGetCheckWrap<R>::push(L,
				((R (*)())lua_touserdata(L, lua_upvalueindex(1)))());
		return 1;
	}
};

template<typename A1>
struct FuncWrap<void (*)(A1)> {
	static int cppfunction(lua_State* L) {
		if (!argcheck(L, lua_tostring(L, lua_upvalueindex(2)), 1,
				PushGetCheckWrap<A1>::check(L, 1))) {
			return 0;
		}
		((void (*)(A1))lua_touserdata(L, lua_upvalueindex(1)))(
				PushGetCheckWrap<A1>::get(L, 1));
		return 0;
	}
};

template<typename R, typename A1>
struct FuncWrap<R (*)(A1)> {
	static int cppfunction(lua_State* L) {
		if (!argcheck(L, lua_tostring(L, lua_upvalueindex(2)), 1,
				PushGetCheckWrap<A1>::check(L, 1))) {
			return 0;
		}
		PushGetCheckWrap<R>::push(L,
				((R (*)(A1))lua_touserdata(L, lua_upvalueindex(1)))(
						PushGetCheckWrap<A1>::get(L, 1)));
		return 1;
	}
};

/******************************************************************************
 * END AUTOGENERATED CODE -- Here be DRAGONS. Use generate-code.py to edit    *
 ******************************************************************************/
}
}

namespace luawrap {

template<typename Function>
inline void push_cppfunction(lua_State* L, const char* fname, Function func) {
	lua_pushlightuserdata(L, (void*)func);
	lua_pushstring(L, fname);
	lua_pushcclosure(L, _private::FuncWrap<Function>::cppfunction, 2);
}

}

#endif /* LUAWRAP_FUNCTIONS_H_ */
